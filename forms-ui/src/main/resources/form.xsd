<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2012 Evolveum
  ~
  ~ The contents of this file are subject to the terms
  ~ of the Common Development and Distribution License
  ~ (the License). You may not use this file except in
  ~ compliance with the License.
  ~
  ~ You can obtain a copy of the License at
  ~ http://www.opensource.org/licenses/cddl1 or
  ~ CDDLv1.0.txt file in the source code distribution.
  ~ See the License for the specific language governing
  ~ permission and limitations under the License.
  ~
  ~ If applicable, add the following below the CDDL Header,
  ~ with the fields enclosed by brackets [] replaced by
  ~ your own identifying information:
  ~
  ~ Portions Copyrighted 2012 [name of copyright owner]
  -->
<xsd:schema targetNamespace="http://midpoint.evolveum.com/xml/ns/public/gui/form"
            xmlns:tns="http://midpoint.evolveum.com/xml/ns/public/gui/form"
            xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            xmlns:jaxb="http://java.sun.com/xml/ns/jaxb"
            xmlns:xjc="http://java.sun.com/xml/ns/jaxb/xjc"
            elementFormDefault="qualified"
            jaxb:extensionBindingPrefixes="xjc"
            jaxb:version="2.0">

    <xsd:annotation>
        <xsd:appinfo>
            <jaxb:globalBindings>
                <xjc:typeSubstitution type="complex"/>
                <xjc:serializable uid="201207061507"/>
            </jaxb:globalBindings>
        </xsd:appinfo>
    </xsd:annotation>

    <xsd:element name="form" type="tns:FormType"/>

    <xsd:complexType name="FormType">
        <xsd:sequence>
            <xsd:element name="include" type="tns:IncludeType" minOccurs="0" maxOccurs="unbounded"/>
            <xsd:element ref="tns:item" minOccurs="0" maxOccurs="unbounded"/>
        </xsd:sequence>
        <xsd:attribute name="name" type="xsd:string"/>
    </xsd:complexType>

    <xsd:element name="item" type="tns:FormItemType"/>
    <xsd:element name="field" type="tns:FieldType" substitutionGroup="tns:item"/>
    <xsd:element name="fieldGroup" type="tns:FieldGroupType" substitutionGroup="tns:item"/>
    <xsd:element name="fieldRef" type="tns:FieldReferenceType" substitutionGroup="tns:item"/>

    <xsd:complexType name="IncludeType">
        <xsd:annotation>
            <xsd:documentation>
                This type is used for including fields, field groups from other forms.
                Base file path "." is ${midpoint.home}/forms
            </xsd:documentation>
        </xsd:annotation>
        <xsd:attribute name="file" type="xsd:string" use="required"/>
        <xsd:attribute name="alias" type="xsd:string" use="required"/>
    </xsd:complexType>

    <xsd:complexType name="FormItemType" abstract="true">
        <xsd:annotation>
            <xsd:documentation>
                This is just parent "marker" type for FieldType, FieldGroupType (represented by
                AbstractFieldType) and FieldReferenceType
            </xsd:documentation>
        </xsd:annotation>
    </xsd:complexType>

    <xsd:complexType name="FieldReferenceType">
        <xsd:annotation>
            <xsd:documentation>
                <!--todo documentation-->
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="tns:FormItemType">
                <xsd:attribute name="include" type="xsd:string" use="required"/>
                <xsd:attribute name="alias" type="xsd:string" use="required"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="AbstractFieldType" abstract="true">
        <xsd:annotation>
            <xsd:documentation>
                <!--todo documentation-->
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="tns:FormItemType">
                <xsd:sequence>
                    <xsd:element name="display" type="tns:DisplayType"/>
                    <xsd:element name="enabled" type="tns:EnabledType"/>
                    <xsd:element name="visible" type="tns:VisibleType"/>
                </xsd:sequence>
                <xsd:attribute name="name" type="xsd:string" use="optional"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="FieldGroupType">
        <xsd:complexContent>
            <xsd:extension base="tns:AbstractFieldType">
                <xsd:sequence>
                    <xsd:element ref="tns:field" minOccurs="0" maxOccurs="unbounded"/>
                    <xsd:element ref="tns:fieldRef" minOccurs="0" maxOccurs="unbounded"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="FieldType">
        <xsd:complexContent>
            <xsd:extension base="tns:AbstractFieldType">
                <xsd:sequence>
                    <xsd:element name="value" type="tns:ValueType"/>
                    <xsd:element name="validation" type="tns:ValidationType"/>
                </xsd:sequence>
                <xsd:attribute name="ref" type="xsd:string" use="required"/>
            </xsd:extension>
        </xsd:complexContent>

        <!-- name and pointer to some model -->
        <!-- value - also default values and so on -->
        <!-- some kind of renderer, probably something like IChoiceRenderer in wicket to translate
        real value to display value and after edit to translate displayed value to real value -->

        <!-- spring expression language -->
    </xsd:complexType>


    <xsd:complexType name="ValueType">
        <xsd:annotation>
            <xsd:documentation>
                <!--todo documentation-->

                design possibility to invoke java code, create some default impl for example to invoke
                model methods to list groups on resource or something like that
            </xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="type" type="xsd:QName"/>
        </xsd:sequence>
        <xsd:attribute name="maxOccurs" type="xsd:int" use="optional"/>
        <xsd:attribute name="minOccurs" type="xsd:int" use="optional"/>
    </xsd:complexType>

    <xsd:complexType name="DisplayType">
        <xsd:sequence>
            <xsd:element name="label" type="xsd:string"/>
            <xsd:element name="tooltip" type="xsd:string" minOccurs="0"/>
            <xsd:element name="help" type="xsd:string" minOccurs="0"/>

            <xsd:element name="cssStyle" type="xsd:string" minOccurs="0"/>
            <xsd:element name="cssClass" type="xsd:string" minOccurs="0"/>

            <xsd:element name="property" type="tns:PropertyType" minOccurs="0" maxOccurs="unbounded"/>
        </xsd:sequence>
        <!-- for default types like text field, label, combo box, etc. -->
        <xsd:attribute name="type" type="xsd:string" use="optional"/>
        <!-- custom implementation of some interface -->
        <xsd:attribute name="class" type="xsd:string" use="optional"/>
        <xsd:attribute name="newLine" type="xsd:boolean" use="optional" default="true"/>
    </xsd:complexType>

    <xsd:complexType name="PropertyType">
        <xsd:attribute name="name" type="xsd:string"/>
        <!-- todo value -->
    </xsd:complexType>

    <xsd:complexType name="ValidationType">
        <xsd:sequence>
            <xsd:element name="server" type="xsd:string" minOccurs="0" maxOccurs="unbounded">
                <xsd:annotation>
                    <xsd:documentation>
                        <!--todo-->
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="client" type="tns:ClientValidationType" minOccurs="0"/>
        </xsd:sequence>
    </xsd:complexType>

    <xsd:complexType name="ClientValidationType">
        <xsd:annotation>
            <xsd:documentation>
                <!--todo-->
                javascript stuff, we replate ${this} with proper input id, probably
                some jQuery black magic

                TODO: add event type attribute to client element for this validator
            </xsd:documentation>
        </xsd:annotation>
        <xsd:simpleContent>
            <xsd:extension base="xsd:string">
                <xsd:attribute name="event" type="xsd:string" use="required"/>
            </xsd:extension>
        </xsd:simpleContent>
    </xsd:complexType>

    <xsd:complexType name="EnabledType">
        <xsd:annotation>
            <xsd:documentation>
                This element is responsible for enabling/disabling input fields. Now it's only simple
                decision based on state of edited object. When this element is not defined, input field
                is always enabled. If it's defined and it's not empty than input field is only enabled
                if object state is corresponds with OperationType definition.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element ref="tns:operation" minOccurs="0" maxOccurs="unbounded"/>
        </xsd:sequence>
    </xsd:complexType>

    <xsd:complexType name="VisibleType">
        <xsd:annotation>
            <xsd:documentation>
                This element is responsible for visibility of input fields. Now it's only simple
                decision based on state of edited object. When this element is not defined, input field
                is always visible. If it's defined and it's not empty than input field is only visible
                if object state is corresponds with OperationType definition.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element ref="tns:operation" minOccurs="0" maxOccurs="unbounded"/>
        </xsd:sequence>
    </xsd:complexType>

    <xsd:element name="operation" type="tns:OperationType"/>

    <xsd:simpleType name="OperationType">
        <xsd:annotation>
            <xsd:documentation>
                <!-- todo document -->
            </xsd:documentation>
            <xsd:appinfo>
                <jaxb:typesafeEnumClass/>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:restriction base="xsd:string">
            <xsd:enumeration value="create">
                <xsd:annotation>
                    <xsd:appinfo>
                        <jaxb:typesafeEnumMember name="CREATE"/>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="update">
                <xsd:annotation>
                    <xsd:appinfo>
                        <jaxb:typesafeEnumMember name="UPDATE"/>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:enumeration>
        </xsd:restriction>
    </xsd:simpleType>

    <!-- field and field group loops -->
    <!-- ajax validators - default existing stuff, users should be able to implement their own validators -->
    <!-- label width for fields only also global defined in field groups -->
    <!-- todo what else do we want in here? -->


</xsd:schema>

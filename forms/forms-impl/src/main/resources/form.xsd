<?xml version="1.0" encoding="UTF-8"?>

<!--
  ~ Copyright (c) 2012 Evolveum
  ~
  ~ The contents of this file are subject to the terms
  ~ of the Common Development and Distribution License
  ~ (the License). You may not use this file except in
  ~ compliance with the License.
  ~
  ~ You can obtain a copy of the License at
  ~ http://www.opensource.org/licenses/cddl1 or
  ~ CDDLv1.0.txt file in the source code distribution.
  ~ See the License for the specific language governing
  ~ permission and limitations under the License.
  ~
  ~ If applicable, add the following below the CDDL Header,
  ~ with the fields enclosed by brackets [] replaced by
  ~ your own identifying information:
  ~
  ~ Portions Copyrighted 2012 [name of copyright owner]
  -->

<xsd:schema targetNamespace="http://midpoint.evolveum.com/xml/ns/public/gui/form-1"
            xmlns:tns="http://midpoint.evolveum.com/xml/ns/public/gui/form-1"
            xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            xmlns:jaxb="http://java.sun.com/xml/ns/jaxb"
            xmlns:xjc="http://java.sun.com/xml/ns/jaxb/xjc"
            elementFormDefault="qualified"
            jaxb:extensionBindingPrefixes="xjc"
            jaxb:version="2.0">

    <xsd:annotation>
        <xsd:appinfo>
            <jaxb:globalBindings>
                <xjc:typeSubstitution type="complex"/>
                <xjc:serializable uid="201208301640"/>
            </jaxb:globalBindings>
        </xsd:appinfo>
    </xsd:annotation>

    <xsd:element name="form" type="tns:FormType"/>

    <xsd:complexType name="FormType">
        <xsd:sequence>
            <xsd:element name="display" type="tns:FormDisplayType" minOccurs="0"/>
            <xsd:element name="include" type="tns:IncludeType" minOccurs="0" maxOccurs="unbounded"/>
            <xsd:element ref="tns:item" minOccurs="0" maxOccurs="unbounded"/>
        </xsd:sequence>
        <xsd:attribute name="name" type="xsd:string"/>
    </xsd:complexType>

    <xsd:complexType name="FormDisplayType">
        <xsd:complexContent>
            <xsd:extension base="tns:BaseDisplayType">
                <xsd:sequence>
                    <xsd:element name="theme" type="xsd:string" minOccurs="0"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="item" type="tns:BaseFieldType"/>
    <xsd:element name="field" type="tns:FieldType" substitutionGroup="tns:item"/>
    <xsd:element name="fieldGroup" type="tns:FieldGroupType" substitutionGroup="tns:item"/>
    <xsd:element name="fieldRef" type="tns:FieldReferenceType" substitutionGroup="tns:item"/>
    <xsd:element name="fieldLoop" type="tns:FieldLoopType" substitutionGroup="tns:item"/>

    <xsd:complexType name="IncludeType">
        <xsd:annotation>
            <xsd:documentation>
                This type is used for including fields, field groups from other forms.
                Base file path "." is ${midpoint.home}/forms
            </xsd:documentation>
        </xsd:annotation>
        <xsd:attribute name="file" type="xsd:string" use="required"/>
        <xsd:attribute name="alias" type="xsd:string" use="required"/>
    </xsd:complexType>

    <xsd:complexType name="BaseFieldType" abstract="true">
        <xsd:annotation>
            <xsd:documentation>
                This is just parent "marker" type for FieldType, FieldGroupType (represented by
                BaseDisplayableFieldType) and FieldReferenceType
            </xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element ref="tns:description" minOccurs="0"/>
        </xsd:sequence>
    </xsd:complexType>

    <xsd:complexType name="FieldReferenceType">
        <xsd:annotation>
            <xsd:documentation>
                Field reference provides possibility to reference field from other part of form (or from completly
                other forms) via include.

                "ref" element is optional and can be used to override ref element in referenced field/group.

                "include" attribute points to "alias" attribute in include element which points to another form,
                optional.
                "alias" attribute points to "name" attribute in referenced field.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="tns:BaseFieldType">
                <xsd:sequence>
                    <xsd:element name="ref" type="tns:ReferenceType" minOccurs="0"/>
                </xsd:sequence>
                <xsd:attribute name="include" type="xsd:string" use="optional"/>
                <xsd:attribute name="alias" type="xsd:string" use="required"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="BaseDisplayableFieldType" abstract="true">
        <xsd:annotation>
            <xsd:documentation>
                <!--todo documentation-->
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="tns:BaseFieldType">
                <xsd:sequence>
                    <xsd:element name="enabled" type="tns:ExpressionType" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                This element is responsible for enabling/disabling input fields. Now it's only simple
                                decision based on state of edited object. When this element is not defined, input field
                                is always enabled. If it's defined and it's not empty than input field is only enabled
                                if object state is corresponds with OperationType definition.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="visible" type="tns:ExpressionType" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                This element is responsible for visibility of input fields. Now it's only simple
                                decision based on state of edited object. When this element is not defined, input field
                                is always visible. If it's defined and it's not empty than input field is only visible
                                if object state is corresponds with OperationType definition.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
                <xsd:attribute name="name" type="xsd:string" use="optional"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="BaseGroupFieldType" abstract="true">
        <xsd:annotation>
            <xsd:documentation>
                <!--todo documentation-->
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="tns:BaseDisplayableFieldType">
                <xsd:sequence>
                    <xsd:element name="display" type="tns:DisplayType" minOccurs="0"/>
                    <xsd:element ref="tns:item" minOccurs="0" maxOccurs="unbounded"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="FieldLoopType">
        <xsd:annotation>
            <xsd:documentation>
                Ref attribute MUST point to multivalue PrismContainer or List of Item objects.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="tns:BaseGroupFieldType">
                <xsd:sequence>
                    <xsd:element name="ref" type="tns:ReferenceType"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="FieldGroupType">
        <xsd:annotation>
            <xsd:documentation>
                If ref attribute is used it MUST point to PrismContainer. Children of this group will
                be computed from it's PrismContainer child items.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="tns:BaseGroupFieldType">
                <xsd:sequence>
                    <xsd:element name="ref" type="tns:ReferenceType" minOccurs="0"/>

                    <xsd:element name="exclusions" type="tns:ExclusionsType" minOccurs="0"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="FieldType">
        <xsd:annotation>
            <xsd:documentation>
                "widget" attribute is used for default included types like text, label, combo, password, checkbox,
                etc. or class name for custom implementation
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="tns:BaseDisplayableFieldType">
                <xsd:sequence>
                    <xsd:element name="ref" type="tns:ReferenceType" minOccurs="0"/>
                    <xsd:element name="display" type="tns:FieldDisplayType" minOccurs="0"/>
                    <xsd:element name="source" type="tns:ChannelType" minOccurs="0"/>
                    <xsd:element name="target" type="tns:ChannelType" minOccurs="0"/>
                    <xsd:element name="value" type="tns:ValueType" minOccurs="0"/>
                </xsd:sequence>
                <xsd:attribute name="widget" type="xsd:string" use="optional"/>
            </xsd:extension>
        </xsd:complexContent>

        <!-- name and pointer to some model -->
        <!-- value - also default values and so on -->
        <!-- some kind of renderer, probably something like IChoiceRenderer in wicket to translate
        real value to display value and after edit to translate displayed value to real value -->

    </xsd:complexType>

    <xsd:complexType name="FieldDisplayType">
        <xsd:complexContent>
            <xsd:extension base="tns:DisplayType">
                <xsd:sequence>
                    <!-- todo this is also in ValueType -->
                    <xsd:element name="minOccurs" type="xsd:int" minOccurs="0"/>
                    <xsd:element name="maxOccurs" type="xsd:int" minOccurs="0"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="ExclusionsType">
        <xsd:sequence>
            <xsd:element name="exclusion" type="tns:PathType" minOccurs="0" maxOccurs="unbounded"/>
        </xsd:sequence>
    </xsd:complexType>

    <xsd:complexType name="PathType" mixed="true">
        <xsd:annotation>
            <xsd:appinfo>
                <jaxb:dom/>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:simpleContent>
            <xsd:extension base="xsd:string"/>
        </xsd:simpleContent>
    </xsd:complexType>

    <xsd:complexType name="ReferenceType" mixed="true">
        <xsd:annotation>
            <xsd:appinfo>
                <jaxb:dom/>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:simpleContent>
            <xsd:extension base="xsd:string">
                <xsd:attribute name="key" type="xsd:string"/>
            </xsd:extension>
        </xsd:simpleContent>
    </xsd:complexType>

    <xsd:complexType name="ValueType">
        <xsd:annotation>
            <xsd:documentation>
                <!--todo documentation-->

                design possibility to invoke java code, create some default impl for example to invoke
                model methods to list groups from somewhere (ldap) or something like that
            </xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="type" type="xsd:QName" minOccurs="0"/>
            <!-- todo this is also in FieldDisplayType -->
            <xsd:element name="minOccurs" type="xsd:int" minOccurs="0"/>
            <xsd:element name="maxOccurs" type="xsd:int" minOccurs="0"/>

            <xsd:element name="availableValues" type="tns:ExpressionType" minOccurs="0"/>
            <xsd:element name="validation" type="tns:ValidationType" minOccurs="0"/>
        </xsd:sequence>
    </xsd:complexType>

    <xsd:complexType name="ChannelType">
        <xsd:annotation>
            <xsd:documentation>
                <!-- todo document -->
            </xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="ref" type="tns:ReferenceType"/>
            <xsd:element ref="tns:expression" minOccurs="0"/>
        </xsd:sequence>
    </xsd:complexType>

    <xsd:complexType name="BaseDisplayType" abstract="true">
        <xsd:sequence>
            <!-- base properties -->
            <xsd:element name="label" type="xsd:string" minOccurs="0"/>
            <xsd:element name="tooltip" type="xsd:string" minOccurs="0"/>
            <xsd:element name="help" type="xsd:string" minOccurs="0"/>
            <!-- style properties -->
            <xsd:element name="cssStyle" type="xsd:string" minOccurs="0"/>
            <xsd:element name="cssClass" type="xsd:string" minOccurs="0"/>
            <!-- extended properties -->
            <xsd:element name="property" type="tns:PropertyType" minOccurs="0" maxOccurs="unbounded"/>
        </xsd:sequence>
        <!-- UiField, UiFieldGroup, UiField loop by default - implementation class for field. -->
        <xsd:attribute name="type" type="xsd:string" use="optional"/>
    </xsd:complexType>

    <xsd:complexType name="DisplayType">
        <xsd:complexContent>
            <xsd:extension base="tns:BaseDisplayType">
                <!-- displayable form component position (if true, field/group/loop will be placed on new line) -->
                <xsd:attribute name="newLine" type="xsd:boolean" use="optional" default="true"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="PropertyType">
        <xsd:simpleContent>
            <xsd:extension base="xsd:string">
                <xsd:attribute name="name" type="xsd:string"/>
            </xsd:extension>
        </xsd:simpleContent>
    </xsd:complexType>

    <xsd:complexType name="ValidationType">
        <xsd:sequence>
            <xsd:element name="server" type="xsd:string" minOccurs="0" maxOccurs="unbounded">
                <xsd:annotation>
                    <xsd:documentation>
                        <!--todo-->
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="client" type="tns:ClientValidationType" minOccurs="0"/>
        </xsd:sequence>
    </xsd:complexType>

    <xsd:complexType name="ClientValidationType">
        <xsd:annotation>
            <xsd:documentation>
                <!--todo-->
                javascript stuff, we replate ${this} with proper input id, probably
                some jQuery black magic

                TODO: add event type attribute to client element for this validator
            </xsd:documentation>
        </xsd:annotation>
        <xsd:simpleContent>
            <xsd:extension base="xsd:string">
                <xsd:attribute name="event" type="xsd:string" use="required"/>
            </xsd:extension>
        </xsd:simpleContent>
    </xsd:complexType>

    <xsd:element name="description" type="xsd:string"/>

    <xsd:element name="expression" type="tns:ExpressionType"/>

    <!-- TODO REMOVE AND USE c:ExpressionType insead -->
    <xsd:complexType name="ExpressionType">
        <xsd:sequence>
            <xsd:element ref="tns:description" minOccurs="0"/>
            <xsd:element ref="tns:expressionEvaluator" minOccurs="1" maxOccurs="unbounded"/>
        </xsd:sequence>
    </xsd:complexType>

    <xsd:element name="expressionEvaluator" abstract="true"/>
    <xsd:element name="object" type="xsd:anyType" substitutionGroup="tns:expressionEvaluator" nillable="true"/>
    <xsd:element name="script" type="tns:ScriptExpressionEvaluatorType" substitutionGroup="tns:expressionEvaluator"/>
    <xsd:element name="invoke" type="xsd:string" substitutionGroup="tns:expressionEvaluator"/>

    <xsd:complexType name="ScriptExpressionEvaluatorType">
        <xsd:annotation>
            <xsd:documentation>
                <!-- todo document -->
            </xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element ref="tns:description" minOccurs="0"/>
            <xsd:element name="language" type="xsd:anyURI" minOccurs="0"
                         default="http://midpoint.evolveum.com/xml/ns/public/expression/language#Groovy">
                <xsd:annotation>
                    <xsd:documentation>
                        Language of the expression. Groovy is the default language if other language is not specified.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="code" type="tns:ScriptExpressionCodeType">
                <xsd:annotation>
                    <xsd:documentation>
                        TODO
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
        </xsd:sequence>
    </xsd:complexType>

    <xsd:complexType name="ScriptExpressionCodeType" mixed="true">
        <xsd:annotation>
            <xsd:documentation>
                The expression code is supposed to be in the context of this type. The content ix "mixed"
                which allows both XML and non-XML languages.
            </xsd:documentation>
            <xsd:appinfo>
                <jaxb:dom/>
            </xsd:appinfo>
        </xsd:annotation>
    </xsd:complexType>

    <!-- ajax validators - default existing stuff, users should be able to implement their own validators -->
    <!-- label width for fields only also global defined in field groups -->
    <!-- todo what else do we want in here? -->

</xsd:schema>

package com.evolveum.midpoint.xml.ns._public.model.model_1_wsdl;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.xml.bind.annotation.XmlSeeAlso;

/**
 * This class was generated by Apache CXF 2.4.3
 * 2012-01-18T16:21:53.056+01:00
 * Generated source version: 2.4.3
 */
@WebService(targetNamespace = "http://midpoint.evolveum.com/xml/ns/public/model/model-1.wsdl", name = "modelPortType")
@XmlSeeAlso({com.evolveum.midpoint.xml.ns._public.common.fault_1.ObjectFactory.class, com.evolveum.midpoint.xml.ns._public.common.common_1.ObjectFactory.class, org.w3._2001._04.xmlenc.ObjectFactory.class, org.w3._2000._09.xmldsig.ObjectFactory.class, com.evolveum.midpoint.xml.ns._public.common.annotation_1.ObjectFactory.class})
@SOAPBinding(style = SOAPBinding.Style.RPC)
public interface ModelPortType {

    /**
     * Deleted object with provided OID.
     * Must fail if object with specified OID does not exists.
     * Should be atomic.
     * <p/>
     * Faults:
     * any SystemFaultType
     * ObjectNotFoundFaultType: object with specified OID does not exists
     * IllegalArgumentFaultType: wrong OID format
     */
    @WebResult(name = "result", targetNamespace = "http://midpoint.evolveum.com/xml/ns/public/model/model-1.wsdl", partName = "result")
    @WebMethod
    public com.evolveum.midpoint.xml.ns._public.common.common_1.OperationResultType deleteObject(
            @WebParam(partName = "objectType", name = "objectType")
            java.lang.String objectType,
            @WebParam(partName = "oid", name = "oid")
            java.lang.String oid
    ) throws com.evolveum.midpoint.xml.ns._public.common.fault_1_wsdl.FaultMessage;

    /**
     * Returns all objects of specified type in the repository.
     * Not very practical, but good for now.
     * Will be improved later.
     * <p/>
     * Faults:
     * any SystemFaultType
     * IllegalArgumentFaultType: wrong object type
     */
    @WebMethod
    public void listObjects(
            @WebParam(partName = "objectType", name = "objectType")
            java.lang.String objectType,
            @WebParam(partName = "paging", name = "paging")
            com.evolveum.midpoint.xml.ns._public.common.common_1.PagingType paging,
            @WebParam(partName = "objectList", mode = WebParam.Mode.OUT, name = "objectList")
            javax.xml.ws.Holder<com.evolveum.midpoint.xml.ns._public.common.common_1.ObjectListType> objectList,
            @WebParam(partName = "result", mode = WebParam.Mode.OUT, name = "result")
            javax.xml.ws.Holder<com.evolveum.midpoint.xml.ns._public.common.common_1.OperationResultType> result
    ) throws com.evolveum.midpoint.xml.ns._public.common.fault_1_wsdl.FaultMessage;

    /**
     * Returns the User object representing owner of specified account
     * (account shadow).
     * May return (null?? empty??) object if there is no owner
     * specified for the account.
     * <p/>
     * Implements the backward "owns" association between account
     * shadow and user. Forward association is implemented by property
     * "account" of user object.
     * <p/>
     * Faults:
     * any SystemFaultType
     * IllegalArgumentFaultType: wrong OID format
     * ObjectNotFoundFaultType: object with specified OID does not exists
     */
    @WebMethod
    public void listAccountShadowOwner(
            @WebParam(partName = "accountOid", name = "accountOid")
            java.lang.String accountOid,
            @WebParam(partName = "user", mode = WebParam.Mode.OUT, name = "user")
            javax.xml.ws.Holder<com.evolveum.midpoint.xml.ns._public.common.common_1.UserType> user,
            @WebParam(partName = "result", mode = WebParam.Mode.OUT, name = "result")
            javax.xml.ws.Holder<com.evolveum.midpoint.xml.ns._public.common.common_1.OperationResultType> result
    ) throws com.evolveum.midpoint.xml.ns._public.common.fault_1_wsdl.FaultMessage;

    /**
     * Add new object.
     * <p/>
     * The OID provided in the input message may be empty. In that case
     * the OID will be assigned by the implementation of this method
     * and it will be provided as return value.
     * <p/>
     * This operation should fail if such object already exists (if
     * object with the provided OID already exists).
     * <p/>
     * The operation may fail if provided OID is in an unusable format
     * for the storage. Generating own OIDs and providing them to this
     * method is not recommended for normal operation.
     * <p/>
     * Should be atomic. Should not allow creation of two objects with
     * the same OID (even if created in parallel).
     * <p/>
     * The operation may fail if the object to be created does not
     * comform to the underlying schema of the storage system or the
     * schema enforced by the implementation.
     * <p/>
     * Faults:
     * any SystemFaultType
     * ObjectAlreadyExistsFaultType
     * IllegalArgumentFaultType: wrong OID format
     * SchemaViolationFaultType: provided object violates datastore schema
     */
    @WebMethod
    public void addObject(
            @WebParam(partName = "object", name = "object")
            com.evolveum.midpoint.xml.ns._public.common.common_1.ObjectType object,
            @WebParam(partName = "oid", mode = WebParam.Mode.OUT, name = "oid")
            javax.xml.ws.Holder<java.lang.String> oid,
            @WebParam(partName = "result", mode = WebParam.Mode.OUT, name = "result")
            javax.xml.ws.Holder<com.evolveum.midpoint.xml.ns._public.common.common_1.OperationResultType> result
    ) throws com.evolveum.midpoint.xml.ns._public.common.fault_1_wsdl.FaultMessage;

    /**
     * Search for objects in the repository. Searches through all
     * object types. Returns a list of objects that match search
     * criteria.
     * <p/>
     * Faults:
     * any SystemFaultType
     * IllegalArgumentFaultType: wrong object type
     * SchemaViolationFaultType: unknown property used in search query
     */
    @WebMethod
    public void searchObjects(
            @WebParam(partName = "objectType", name = "objectType")
            java.lang.String objectType,
            @WebParam(partName = "query", name = "query")
            com.evolveum.midpoint.xml.ns._public.common.common_1.QueryType query,
            @WebParam(partName = "paging", name = "paging")
            com.evolveum.midpoint.xml.ns._public.common.common_1.PagingType paging,
            @WebParam(partName = "objectList", mode = WebParam.Mode.OUT, name = "objectList")
            javax.xml.ws.Holder<com.evolveum.midpoint.xml.ns._public.common.common_1.ObjectListType> objectList,
            @WebParam(partName = "result", mode = WebParam.Mode.OUT, name = "result")
            javax.xml.ws.Holder<com.evolveum.midpoint.xml.ns._public.common.common_1.OperationResultType> result
    ) throws com.evolveum.midpoint.xml.ns._public.common.fault_1_wsdl.FaultMessage;

    /**
     * Search for resource object shadows of a specified type that
     * belong to the specified resource. Returns a list of such object
     * shadows or empty list if nothing was found.
     * <p/>
     * Implements the backward "has" association between resource and
     * resource object shadows. Forward association is implemented by
     * property "resource" of resource object shadow.
     * <p/>
     * Faults:
     * any SystemFaultType
     * IllegalArgumentFaultType: wrong OID format
     * ObjectNotFoundFaultType: object with specified OID does not exists
     */
    @WebMethod
    public void listResourceObjectShadows(
            @WebParam(partName = "resourceOid", name = "resourceOid")
            java.lang.String resourceOid,
            @WebParam(partName = "resourceObjectShadowType", name = "resourceObjectShadowType")
            java.lang.String resourceObjectShadowType,
            @WebParam(partName = "resourceObjectShadowList", mode = WebParam.Mode.OUT, name = "resourceObjectShadowList")
            javax.xml.ws.Holder<com.evolveum.midpoint.xml.ns._public.common.common_1.ResourceObjectShadowListType> resourceObjectShadowList,
            @WebParam(partName = "result", mode = WebParam.Mode.OUT, name = "result")
            javax.xml.ws.Holder<com.evolveum.midpoint.xml.ns._public.common.common_1.OperationResultType> result
    ) throws com.evolveum.midpoint.xml.ns._public.common.fault_1_wsdl.FaultMessage;

    /**
     * Returns list of available values for specified properties.
     * <p/>
     * The returned values can be used as valid values for properties
     * of the specific object. The provided values can be used e.g.
     * for listing them in GUI list boxes, for early validation
     * (pre-validation), displaying help messages, auto-complete, etc.
     * <p/>
     * In case the list of available values is too big or it is not
     * available, the empty list should be returned, setting the
     * "closed" flag to false.
     * <p/>
     * This optional operation is SUPPORTED by this interface.
     * <p/>
     * Faults:
     * any SystemFaultType
     * UnsupportedObjectTypeFaultType: specified object type is not supported by the interface
     * ObjectNotFoundFaultType: object with specified OID does not exists
     * IllegalArgumentFaultType: wrong OID format
     */
    @WebMethod
    public void getPropertyAvailableValues(
            @WebParam(partName = "oid", name = "oid")
            java.lang.String oid,
            @WebParam(partName = "properties", name = "properties")
            com.evolveum.midpoint.xml.ns._public.common.common_1.PropertyReferenceListType properties,
            @WebParam(partName = "propertyAvailableValuesList", mode = WebParam.Mode.OUT, name = "propertyAvailableValuesList")
            javax.xml.ws.Holder<com.evolveum.midpoint.xml.ns._public.common.common_1.PropertyAvailableValuesListType> propertyAvailableValuesList,
            @WebParam(partName = "result", mode = WebParam.Mode.OUT, name = "result")
            javax.xml.ws.Holder<com.evolveum.midpoint.xml.ns._public.common.common_1.OperationResultType> result
    ) throws com.evolveum.midpoint.xml.ns._public.common.fault_1_wsdl.FaultMessage;

    /**
     * TODO: update description
     * <p/>
     * Launch import task that will import all the accounts from the
     * resource.
     * <p/>
     * WARNING: This operation is not considered public. It is a
     * temporary solution until we have full-featured task management.
     * It may be removed any time without a warning.
     * <p/>
     * DO NOT USE IT unless you are really sure you know what you
     * are doing.
     * <p/>
     * Faults:
     * any SystemFaultType
     * ObjectNotFoundFaultType: specified Resource definition does not exist
     */
    @WebResult(name = "task", targetNamespace = "http://midpoint.evolveum.com/xml/ns/public/model/model-1.wsdl", partName = "task")
    @WebMethod
    public com.evolveum.midpoint.xml.ns._public.common.common_1.TaskType importFromResource(
            @WebParam(partName = "resourceOid", name = "resourceOid")
            java.lang.String resourceOid,
            @WebParam(partName = "objectClass", name = "objectClass")
            javax.xml.namespace.QName objectClass
    ) throws com.evolveum.midpoint.xml.ns._public.common.fault_1_wsdl.FaultMessage;

    /**
     * WARNING:
     * This operation should not be here. It is in fact
     * just a diagnostics methods from the provisioning interface
     * that need to be accessed from GUI. Do not use it for
     * anything serious. It will disappear eventually.
     * <p/>
     * Returns all objects of specified type that are available to the
     * implementation.
     * <p/>
     * Returns empty list if object type is correct but there are no
     * objects of that type.
     * <p/>
     * Should fail if object type is wrong (e.g. specified type is
     * not part of resource schema).
     * <p/>
     * This method does NOT use any shadow objects for reference or any
     * other business objects in the local repository. It goes directly
     * to the resource.
     * <p/>
     * The returned objects (indirectly) complies with the resource
     * schema, but it is returned re-formated in a form of detached
     * shadow object. Although the form is the same as shadow object,
     * this is NOT really a shadow object because it is not stored in
     * the repository (it is detached). It does NOT have oid.
     * <p/>
     * The object is identified by whatever identification
     * properties/attributes are defined by the resource schema.
     * <p/>
     * This method is not required to implement any form of caching,
     * queueing, reference resolution or any other "smart" algorithm.
     * <p/>
     * any SystemFaultType
     * IllegalArgumentFaultType: wrong object type
     * ProvisioningFaultType: ???
     * <p/>
     * <p/>
     * Use of this method is not recommended if there is a way how to
     * do the same using the standard "object access" methods. E.g.
     * if accounts can be namipulated using account shadows, the
     * shadows should be used. This method is provided only to support
     * the rare case that an unknown resource object type should be
     * used in business logic and for diagnostics reasons.
     */
    @WebMethod
    public void listResourceObjects(
            @WebParam(partName = "resourceOid", name = "resourceOid")
            java.lang.String resourceOid,
            @WebParam(partName = "objectType", name = "objectType")
            javax.xml.namespace.QName objectType,
            @WebParam(partName = "paging", name = "paging")
            com.evolveum.midpoint.xml.ns._public.common.common_1.PagingType paging,
            @WebParam(partName = "objectList", mode = WebParam.Mode.OUT, name = "objectList")
            javax.xml.ws.Holder<com.evolveum.midpoint.xml.ns._public.common.common_1.ObjectListType> objectList,
            @WebParam(partName = "result", mode = WebParam.Mode.OUT, name = "result")
            javax.xml.ws.Holder<com.evolveum.midpoint.xml.ns._public.common.common_1.OperationResultType> result
    ) throws com.evolveum.midpoint.xml.ns._public.common.fault_1_wsdl.FaultMessage;

    /**
     * Returns object for provided OID.
     * Must fail if object with the OID does not exists.
     * <p/>
     * Reference resolution is SUPPORTED by this operation.
     * <p/>
     * Faults:
     * any SystemFaultType
     * IllegalArgumentFaultType: wrong OID format
     * ObjectNotFoundFaultType: object with specified OID does not exists
     */
    @WebMethod
    public void getObject(
            @WebParam(partName = "objectType", name = "objectType")
            java.lang.String objectType,
            @WebParam(partName = "oid", name = "oid")
            java.lang.String oid,
            @WebParam(partName = "resolve", name = "resolve")
            com.evolveum.midpoint.xml.ns._public.common.common_1.PropertyReferenceListType resolve,
            @WebParam(partName = "object", mode = WebParam.Mode.OUT, name = "object")
            javax.xml.ws.Holder<com.evolveum.midpoint.xml.ns._public.common.common_1.ObjectType> object,
            @WebParam(partName = "result", mode = WebParam.Mode.OUT, name = "result")
            javax.xml.ws.Holder<com.evolveum.midpoint.xml.ns._public.common.common_1.OperationResultType> result
    ) throws com.evolveum.midpoint.xml.ns._public.common.fault_1_wsdl.FaultMessage;

    /**
     * Modifies object using relative change description.
     * Must fail if user with provided OID does not exists.
     * Must fail if any of the described changes cannot be applied.
     * Should be atomic.
     * <p/>
     * If two or more modify operations are executed in parallel, the
     * operations should be merged. In case that the operations are in
     * conflict (e.g. one operation adding a value and the other
     * removing the same value), the result is not deterministic.
     * <p/>
     * The operation may fail if the modified object does not
     * comform to the underlying schema of the storage system or the
     * schema enforced by the implementation.
     * <p/>
     * TODO: optimistic locking
     * <p/>
     * Faults:
     * any SystemFaultType
     * ObjectNotFoundFaultType: object with specified OID does not exists
     * IllegalArgumentFaultType: wrong OID format
     * InapplicableOperationFaultType: decribed change is not applicable
     * SchemaViolationFaultType: resulting object would violate datastore schema
     */
    @WebResult(name = "result", targetNamespace = "http://midpoint.evolveum.com/xml/ns/public/model/model-1.wsdl", partName = "result")
    @WebMethod
    public com.evolveum.midpoint.xml.ns._public.common.common_1.OperationResultType modifyObject(
            @WebParam(partName = "objectType", name = "objectType")
            java.lang.String objectType,
            @WebParam(partName = "objectChange", name = "objectChange")
            com.evolveum.midpoint.xml.ns._public.common.common_1.ObjectModificationType objectChange
    ) throws com.evolveum.midpoint.xml.ns._public.common.fault_1_wsdl.FaultMessage;

    /**
     * WARNING:
     * This operation should not be here. It is in fact
     * just a diagnostics methods from the provisioning interface
     * that need to be accessed from GUI. Do not use it for
     * anything serious. It will disappear eventually.
     * <p/>
     * Test the resouce connection and basic resource connector
     * functionality.
     * <p/>
     * This operation will NOT raise fault in case the resource
     * connection fails. It such case it will indicate the failure in
     * the return message, but the operation itself succeeds.
     * The operations fails only if the provided arguments are wrong,
     * in case of system error, system misconfiguration, etc.
     * <p/>
     * Faults:
     * any SystemFaultType
     * ObjectNotFoundFaultType: specified Resource definition does not exist
     */
    @WebResult(name = "result", targetNamespace = "http://midpoint.evolveum.com/xml/ns/public/model/model-1.wsdl", partName = "result")
    @WebMethod
    public com.evolveum.midpoint.xml.ns._public.common.common_1.OperationResultType testResource(
            @WebParam(partName = "resourceOid", name = "resourceOid")
            java.lang.String resourceOid
    ) throws com.evolveum.midpoint.xml.ns._public.common.fault_1_wsdl.FaultMessage;
}
